Prefix(:=<http://ontology.cybershare.utep.edu/dbowl/relational-to-ontology-mapping-dbowlizer.owl#>)
Prefix(cc:=<http://creativecommons.org/ns#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(ns0:=<http://protege.stanford.edu/plugins/owl/protege#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(base:=<http://ontology.cybershare.utep.edu/dbowl/relational-to-ontology-mapping-dbowlizer.owl>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(vann:=<http://purl.org/vocab/vann/>)
Prefix(dbowl:=<http://ontology.cybershare.utep.edu/resource/dbowl/>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)
Prefix(terms:=<http://purl.org/dc/terms/>)
Prefix(ontology:=<http://ontology.dumontierlab.com/>)
Prefix(resource:=<http://ontology.cybershare.utep.edu/resource/>)


Ontology(<http://ontology.cybershare.utep.edu/dbowl/relational-to-ontology-mapping-dbowlizer.owl>
Import(<http://ontology.cybershare.utep.edu/dbowl/relational-to-ontology-mapping-complex.owl>)
Import(<http://ontology.cybershare.utep.edu/dbowl/relational-model-complex.owl>)
Annotation(cc:license "http://creativecommons.org/licenses/by/3.0/"^^xsd:anyURI)
Annotation(ns0:defaultLanguage "en")
Annotation(dc:contributor "Contributors are those that engage in discussions during the development of this ontology (in alphabetical order):
michel dumontier
luis garnica
		"^^xsd:string)
Annotation(dc:creator "Natalia Villanueva-Rosales"@en)
Annotation(dc:creator "http://cybershare.utep.edu"^^xsd:anyURI)
Annotation(dc:creator "iLink @ UTEP"@en)
Annotation(dc:description "
		Ontology that captures the heuristics used by DBOWLizer (Villanueva et al). to extract ontologies from databases.
		"@en)
Annotation(dc:issued "2016-03-01"^^xsd:date)
Annotation(dc:rights "free to use,share,modify. modify with attribution [http://creativecommons.org/licenses/by/3.0/]."^^xsd:string)
Annotation(dc:title "Relational to Ontology Mapping DBOwlizer"@en)
Annotation(terms:identifier "relational-to-ontology-mapping-dbowlizer.owl")
Annotation(terms:modified "2016-04-01"^^xsd:date)
Annotation(vann:preferredNamespacePrefix "dbowl"@en)
Annotation(vann:preferredNamespaceUri "http://ontology.cybershare.utep.edu/dbowl/"^^xsd:string)
Annotation(owl:versionInfo "2.0"^^xsd:string)

Declaration(Class(dbowl:BinaryObjectPropertyMapping))
Declaration(Class(dbowl:ConceptMapping))
Declaration(Class(dbowl:DBAggregationView))
Declaration(Class(dbowl:DBAttribute))
Declaration(Class(dbowl:DBAttributeAlias))
Declaration(Class(dbowl:DBBinaryDependentPrimaryKey))
Declaration(Class(dbowl:DBBinaryDependentRelationshipRelation))
Declaration(Class(dbowl:DBCandidateKeyAttribute))
Declaration(Class(dbowl:DBEquivalentView))
Declaration(Class(dbowl:DBForeignKey))
Declaration(Class(dbowl:DBForeignKeyAttribute))
Declaration(Class(dbowl:DBIndependentPrimaryKey))
Declaration(Class(dbowl:DBJoinProjectionSelectionView))
Declaration(Class(dbowl:DBJoinProjectionView))
Declaration(Class(dbowl:DBJoinSelectionView))
Declaration(Class(dbowl:DBJoinView))
Declaration(Class(dbowl:DBKey))
Declaration(Class(dbowl:DBMultipleDependentPrimaryKey))
Declaration(Class(dbowl:DBNAryDependentRelationshipRelation))
Declaration(Class(dbowl:DBNonForeignKeyAttribute))
Declaration(Class(dbowl:DBNonKeyAttribute))
Declaration(Class(dbowl:DBNonPrimaryForeignKeyAttribute))
Declaration(Class(dbowl:DBNonPrimaryKeyAttribute))
Declaration(Class(dbowl:DBNotNullAttribute))
Declaration(Class(dbowl:DBPartiallyBinaryDependentPrimaryKey))
Declaration(Class(dbowl:DBPartiallyBinaryDependentRelationshipRelation))
Declaration(Class(dbowl:DBPartiallyMultipleDependentPrimaryKey))
Declaration(Class(dbowl:DBPartiallyNAryDependentRelationshipRelation))
Declaration(Class(dbowl:DBPartiallySingleDependentPrimaryKey))
Declaration(Class(dbowl:DBPartiallyUnaryRelationshipRelation))
Declaration(Class(dbowl:DBPrimaryForeignKeyAttribute))
Declaration(Class(dbowl:DBPrimaryKey))
Declaration(Class(dbowl:DBPrimaryKeyAttribute))
Declaration(Class(dbowl:DBPrimaryNonForeignKeyAttribute))
Declaration(Class(dbowl:DBProjectionSelectionView))
Declaration(Class(dbowl:DBProjectionView))
Declaration(Class(dbowl:DBQuery))
Declaration(Class(dbowl:DBQueryCondition))
Declaration(Class(dbowl:DBQueryJoin))
Declaration(Class(dbowl:DBRelation))
Declaration(Class(dbowl:DBSelectionView))
Declaration(Class(dbowl:DBSingleDependentPrimaryKey))
Declaration(Class(dbowl:DBStrongEntityRelation))
Declaration(Class(dbowl:DBUnaryRelationshipRelation))
Declaration(Class(dbowl:DBView))
Declaration(Class(dbowl:DatatypePropertyMapping))
Declaration(Class(dbowl:EnnumerationPropertyRangeMapping))
Declaration(Class(dbowl:EntityConceptMapping))
Declaration(Class(dbowl:FunctionalDatatypePropertyMapping))
Declaration(Class(dbowl:FunctionalObjectPropertyMapping))
Declaration(Class(dbowl:InverseFunctionalObjectPropertyMapping))
Declaration(Class(dbowl:ObjectPropertyMapping))
Declaration(Class(dbowl:RelationConceptMapping))
Declaration(Class(dbowl:SpecificRelationMapping))
Declaration(Class(dbowl:TransitiveObjectPropertyMapping))
Declaration(Class(dbowl:UnaryObjectPropertyMapping))
Declaration(Class(dbowl:VirtualCollectionMapping))
Declaration(Class(dbowl:VirtualConceptMapping))
Declaration(Class(dbowl:VirtualPropertyMapping))
Declaration(Class(owl:Thing))
Declaration(ObjectProperty(dbowl:equivalentClassMapping))
Declaration(ObjectProperty(dbowl:existsSomePropertyRestriction))
Declaration(ObjectProperty(dbowl:hasAttribute))
Declaration(ObjectProperty(dbowl:hasAttributeDomain))
Declaration(ObjectProperty(dbowl:hasDomainMapping))
Declaration(ObjectProperty(dbowl:hasGroupByAttribute))
Declaration(ObjectProperty(dbowl:hasInversePropertyMapping))
Declaration(ObjectProperty(dbowl:hasPart))
Declaration(ObjectProperty(dbowl:hasPropertyMapping))
Declaration(ObjectProperty(dbowl:hasRangeMapping))
Declaration(ObjectProperty(dbowl:isPartOf))
Declaration(ObjectProperty(dbowl:isSubClassOfDomainOfMapping))
Declaration(ObjectProperty(dbowl:isSubClassOfRangeOfMapping))
Declaration(ObjectProperty(dbowl:min1CardinalityRestriction))
Declaration(ObjectProperty(dbowl:propertyRestrictedConceptMapping))
Declaration(ObjectProperty(dbowl:references))
Declaration(ObjectProperty(dbowl:subClassOfMapping))
Declaration(DataProperty(dbowl:hasValue))
Declaration(NamedIndividual(dbowl:all_columns))
Declaration(AnnotationProperty(cc:license))
Declaration(AnnotationProperty(ns0:defaultLanguage))
Declaration(AnnotationProperty(dc:contributor))
Declaration(AnnotationProperty(dc:creator))
Declaration(AnnotationProperty(dc:date))
Declaration(AnnotationProperty(dc:description))
Declaration(AnnotationProperty(dc:issued))
Declaration(AnnotationProperty(dc:rights))
Declaration(AnnotationProperty(dc:title))
Declaration(AnnotationProperty(terms:identifier))
Declaration(AnnotationProperty(terms:modified))
Declaration(AnnotationProperty(vann:preferredNamespacePrefix))
Declaration(AnnotationProperty(vann:preferredNamespaceUri))
Declaration(AnnotationProperty(rdfs:comment))
Declaration(AnnotationProperty(rdfs:label))
Declaration(AnnotationProperty(owl:versionInfo))
Declaration(Datatype(rdf:PlainLiteral))
Declaration(Datatype(rdfs:Literal))
Declaration(Datatype(xsd:string))




############################
#   Classes
############################

# Class: dbowl:BinaryObjectPropertyMapping (Binary Object Property mapping.)

EquivalentClasses(dbowl:BinaryObjectPropertyMapping ObjectIntersectionOf(dbowl:DBPrimaryForeignKeyAttribute ObjectSomeValuesFrom(dbowl:isPartOf ObjectIntersectionOf(dbowl:DBBinaryDependentRelationshipRelation ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBNonKeyAttribute))))))

# Class: dbowl:DBAggregationView ('Database aggregation view')

EquivalentClasses(dbowl:DBAggregationView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin)) ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)))))
SubClassOf(dbowl:DBAggregationView dbowl:DBView)

# Class: dbowl:DBEquivalentView ('Database equivalent view')

AnnotationAssertion(rdfs:comment dbowl:DBEquivalentView "A view that contains all the attributes and records of the defining relation, i.e. a copy of the relation."^^xsd:string)
AnnotationAssertion(rdfs:label dbowl:DBEquivalentView "Database equivalent view"^^xsd:string)
EquivalentClasses(dbowl:DBEquivalentView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin)) ObjectHasValue(dbowl:hasPart dbowl:all_columns)))))
SubClassOf(dbowl:DBEquivalentView dbowl:DBView)

# Class: dbowl:DBJoinProjectionSelectionView ('Database join projection selection view')

AnnotationAssertion(dc:description dbowl:DBJoinProjectionSelectionView "A database view that contains a subset of the attributes and the records of a join table."^^xsd:string)
AnnotationAssertion(rdfs:label dbowl:DBJoinProjectionSelectionView "Database join selection projection view"^^xsd:string)
EquivalentClasses(dbowl:DBJoinProjectionSelectionView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)) ObjectComplementOf(ObjectHasValue(dbowl:hasPart dbowl:all_columns)) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin)))))
SubClassOf(dbowl:DBJoinProjectionSelectionView dbowl:DBView)

# Class: dbowl:DBJoinProjectionView (Database join projection view)

AnnotationAssertion(dc:description dbowl:DBJoinProjectionView "A database view that contains a subset of the attributes of a join table."^^xsd:string)
AnnotationAssertion(rdfs:label dbowl:DBJoinProjectionView "Database join projection view"^^xsd:string)
EquivalentClasses(dbowl:DBJoinProjectionView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition)) ObjectComplementOf(ObjectHasValue(dbowl:hasPart dbowl:all_columns)) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin)))))
SubClassOf(dbowl:DBJoinProjectionView dbowl:DBView)

# Class: dbowl:DBJoinSelectionView (Database join selection view)

AnnotationAssertion(rdfs:comment dbowl:DBJoinSelectionView "A database view that contains a subset of the records of a joined table."^^xsd:string)
AnnotationAssertion(rdfs:label dbowl:DBJoinSelectionView "Database join and selection view"^^xsd:string)
EquivalentClasses(dbowl:DBJoinSelectionView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin) ObjectHasValue(dbowl:hasPart dbowl:all_columns)))))
SubClassOf(dbowl:DBJoinSelectionView dbowl:DBView)

# Class: dbowl:DBJoinView (Database join view)

AnnotationAssertion(rdfs:comment dbowl:DBJoinView "A database view that contains the attributes of two or more joined relations."^^xsd:string)
AnnotationAssertion(rdfs:label dbowl:DBJoinView "Database join view"^^xsd:string)
EquivalentClasses(dbowl:DBJoinView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition)) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin) ObjectHasValue(dbowl:hasPart dbowl:all_columns)))))
SubClassOf(dbowl:DBJoinView dbowl:DBView)

# Class: dbowl:DBNonForeignKeyAttribute (Database non foreign key attribute)

EquivalentClasses(dbowl:DBNonForeignKeyAttribute dbowl:DatatypePropertyMapping)

# Class: dbowl:DBPrimaryKey (Database primary key)

SubClassOf(dbowl:DBPrimaryKey ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBAttribute))

# Class: dbowl:DBProjectionSelectionView (Database projection selection view)

AnnotationAssertion(rdfs:comment dbowl:DBProjectionSelectionView "A database view that contains a subset of the attributes of a relation and a subset of the records of those attributes given a condition."^^xsd:string)
AnnotationAssertion(rdfs:label dbowl:DBProjectionSelectionView "Database projection and selection view"^^xsd:string)
EquivalentClasses(dbowl:DBProjectionSelectionView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin)) ObjectComplementOf(ObjectHasValue(dbowl:hasPart dbowl:all_columns)) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition)))))
SubClassOf(dbowl:DBProjectionSelectionView dbowl:DBView)

# Class: dbowl:DBProjectionView (Database projection view)

AnnotationAssertion(rdfs:comment dbowl:DBProjectionView "A database view that contins a subset of the attributes of the database relation that defines it."^^xsd:string)
AnnotationAssertion(rdfs:label dbowl:DBProjectionView "Database projection view"^^xsd:string)
EquivalentClasses(dbowl:DBProjectionView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin)) ObjectComplementOf(ObjectHasValue(dbowl:hasPart dbowl:all_columns))))))
SubClassOf(dbowl:DBProjectionView dbowl:DBView)

# Class: dbowl:DBRelation (Database relation)

SubClassOf(dbowl:DBRelation ObjectIntersectionOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBAttribute) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBKey)))

# Class: dbowl:DBSelectionView (Database selection view)

AnnotationAssertion(rdfs:comment dbowl:DBSelectionView "A database view that contains a subset of the records of a given relation."^^xsd:string)
AnnotationAssertion(rdfs:label dbowl:DBSelectionView "Database selection view"^^xsd:string)
EquivalentClasses(dbowl:DBSelectionView ObjectIntersectionOf(dbowl:DBView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasGroupByAttribute dbowl:DBAttribute)) ObjectComplementOf(ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryJoin)) ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBQueryCondition) ObjectHasValue(dbowl:hasPart dbowl:all_columns)))))
SubClassOf(dbowl:DBSelectionView dbowl:DBView)

# Class: dbowl:DBSingleDependentPrimaryKey (Database single dependent primary key)

AnnotationAssertion(rdfs:comment dbowl:DBSingleDependentPrimaryKey "TO DO: Check if it's necessary to add here the unary relations from  the foreign key attributes of
dl:DBSingleDependentPrimaryKey")

# Class: dbowl:DatatypePropertyMapping (Datatype property mapping.)

AnnotationAssertion(rdfs:comment dbowl:DatatypePropertyMapping "'Database non-key attribute'
 or ('Database candidate key attribute'
 and (not ('Database foreign key attribute'))
 and (not ('Database primary key attribute')))
 or ('Database non-primary key attribute'
 and (not ('Database foreign key attribute')))
 or ('Database primary and non-foreign key attribute'
 and ('is part of' some 'Relation class mapping'))")

# Class: dbowl:EnnumerationPropertyRangeMapping (dbowl:EnnumerationPropertyRangeMapping)

EquivalentClasses(dbowl:EnnumerationPropertyRangeMapping ObjectIntersectionOf(dbowl:DatatypePropertyMapping DataSomeValuesFrom(dbowl:hasValue rdfs:Literal)))

# Class: dbowl:EntityConceptMapping (Entity Concept Mapping.)

AnnotationAssertion(rdfs:comment dbowl:EntityConceptMapping "A mapping from an entity or relation from a relational database to a concept/class in RDF/OWL that will represent an entity.")
AnnotationAssertion(rdfs:comment dbowl:EntityConceptMapping "Database relations that have independent primary keys, i.e. primary keys whose attributes are not foreign key to another relation are mapped to Entity Concept Mappints.
Database relations whose primary key  depends on another entity, either partially or fully but with only one foreign key are also mapped to an entity class mapping."^^xsd:string)
EquivalentClasses(dbowl:EntityConceptMapping ObjectUnionOf(dbowl:DBPartiallyUnaryRelationshipRelation dbowl:DBStrongEntityRelation ObjectIntersectionOf(dbowl:DBUnaryRelationshipRelation ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBPrimaryKey ObjectMaxCardinality(1 dbowl:hasPart dbowl:DBAttribute))))))

# Class: dbowl:FunctionalDatatypePropertyMapping (dbowl:FunctionalDatatypePropertyMapping)

AnnotationAssertion(rdfs:comment dbowl:FunctionalDatatypePropertyMapping "Previous version, not considering the primary key attributes.
dl:DBNonKeyAttribute
 or (dl:DBCandidateKeyAttribute
 and (not (dl:DBForeignKeyAttribute))
 and (not (dl:DBPrimaryKeyAttribute)))
 or (dl:DBNonPrimaryKeyAttribute
 and (not (dl:DBForeignKeyAttribute)))"^^xsd:string)
AnnotationAssertion(rdfs:comment dbowl:FunctionalDatatypePropertyMapping "TO DO: The not null attribute included here has to be reviewed.")
EquivalentClasses(dbowl:FunctionalDatatypePropertyMapping ObjectIntersectionOf(dbowl:DBNotNullAttribute dbowl:DatatypePropertyMapping))

# Class: dbowl:FunctionalObjectPropertyMapping (dbowl:FunctionalObjectPropertyMapping)

EquivalentClasses(dbowl:FunctionalObjectPropertyMapping ObjectIntersectionOf(dbowl:UnaryObjectPropertyMapping ObjectSomeValuesFrom(dbowl:isPartOf ObjectSomeValuesFrom(dbowl:references dbowl:DBPrimaryKey))))

# Class: dbowl:InverseFunctionalObjectPropertyMapping (Inverse Functional Object Property Mapping.)

EquivalentClasses(dbowl:InverseFunctionalObjectPropertyMapping ObjectIntersectionOf(dbowl:ObjectPropertyMapping ObjectSomeValuesFrom(dbowl:isPartOf dbowl:DBPrimaryKey)))

# Class: dbowl:RelationConceptMapping (Relation Concept Mapping.)

EquivalentClasses(dbowl:RelationConceptMapping ObjectUnionOf(dbowl:DBNAryDependentRelationshipRelation dbowl:DBPartiallyBinaryDependentRelationshipRelation dbowl:DBPartiallyNAryDependentRelationshipRelation ObjectIntersectionOf(dbowl:DBBinaryDependentRelationshipRelation ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBNonKeyAttribute))))

# Class: dbowl:SpecificRelationMapping (A mapping from a relational database element to the subclass (i.e. is-a) relation between to classes.)

AnnotationAssertion(rdfs:comment dbowl:SpecificRelationMapping "previous definition: dl:DBRelation
that dl:hasPart some (dl:DBPrimaryForeignKeyAttribute
                       that dl:isPartOf some (dl:DBSingleDependentPrimaryKey
                                               that dl:hasAttribute max 1 dl:DBAttribute))")
EquivalentClasses(dbowl:SpecificRelationMapping ObjectIntersectionOf(dbowl:DBUnaryRelationshipRelation ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBPrimaryKey ObjectMaxCardinality(1 dbowl:hasAttribute dbowl:DBAttribute)))))

# Class: dbowl:UnaryObjectPropertyMapping (dbowl:UnaryObjectPropertyMapping)

AnnotationAssertion(rdfs:comment dbowl:UnaryObjectPropertyMapping "New definition

dl:DBNonPrimaryForeignKeyAttribute
 or (dl:DBPrimaryForeignKeyAttribute
 and (dl:isPartOf some 
    (dl:DBMultipleDependentPrimaryKey
     or dl:DBPartiallyBinaryDependentPrimaryKey
     or dl:DBPartiallyMultipleDependentPrimaryKey
     or dl:DBPartiallySingleDependentPrimaryKey
     or (dl:DBSingleDependentPrimaryKey and (dl:isPartOf some (dl:DBRelation and (dl:hasPart max 1 dl:DBPrimaryForeignKey))))
     or (dl:DBBinaryDependentPrimaryKey
     and (dl:isPartOf some 
        (dl:DBRelation
         and (dl:hasPart some dl:DBNonKeyAttribute)))))))")
AnnotationAssertion(rdfs:comment dbowl:UnaryObjectPropertyMapping "Previous definition
dl:DBNonPrimaryForeignKeyAttribute
 or (dl:DBPrimaryForeignKeyAttribute
 and (dl:isPartOf some 
    (dl:DBMultipleDependentPrimaryKey
     or dl:DBPartiallyBinaryDependentPrimaryKey
     or dl:DBPartiallyMultipleDependentPrimaryKey
     or dl:DBPartiallySingleDependentPrimaryKey
     or dl:DBSingleDependentPrimaryKey
     or (dl:DBBinaryDependentPrimaryKey
     and (dl:isPartOf some 
        (dl:DBRelation
         and (dl:hasPart some dl:DBNonKeyAttribute)))))))")
EquivalentClasses(dbowl:UnaryObjectPropertyMapping ObjectUnionOf(dbowl:DBNonPrimaryForeignKeyAttribute ObjectIntersectionOf(dbowl:DBPrimaryForeignKeyAttribute ObjectSomeValuesFrom(dbowl:isPartOf ObjectUnionOf(dbowl:DBMultipleDependentPrimaryKey dbowl:DBPartiallyBinaryDependentPrimaryKey dbowl:DBPartiallyMultipleDependentPrimaryKey dbowl:DBPartiallySingleDependentPrimaryKey ObjectIntersectionOf(dbowl:DBBinaryDependentPrimaryKey ObjectSomeValuesFrom(dbowl:isPartOf ObjectIntersectionOf(dbowl:DBRelation ObjectSomeValuesFrom(dbowl:hasPart dbowl:DBNonKeyAttribute)))))))))

# Class: dbowl:VirtualCollectionMapping (dbowl:VirtualCollectionMapping)

EquivalentClasses(dbowl:VirtualCollectionMapping ObjectIntersectionOf(dbowl:DBAggregationView ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBQuery ObjectSomeValuesFrom(dbowl:hasPart ObjectIntersectionOf(dbowl:DBAttributeAlias ObjectSomeValuesFrom(dbowl:hasPart ObjectOneOf(dbowl:all_columns))))))))

# Class: dbowl:VirtualConceptMapping (Virtual concept mapping)

EquivalentClasses(dbowl:VirtualConceptMapping ObjectUnionOf(dbowl:DBEquivalentView dbowl:DBProjectionSelectionView dbowl:DBProjectionView ObjectIntersectionOf(dbowl:DBSelectionView ObjectComplementOf(dbowl:VirtualPropertyMapping))))


############################
#   Named Individuals
############################

# Individual: dbowl:all_columns (dbowl:all_columns)

AnnotationAssertion(rdfs:comment dbowl:all_columns "This will be eliminated if the definition in the class is enough.")
ClassAssertion(owl:Thing dbowl:all_columns)


DLSafeRule(Body(ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryCondition Variable(<urn:swrl#c>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#c>) Variable(<urn:swrl#at>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#c>)) ClassAtom(dbowl:DBSelectionView Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:BinaryObjectPropertyMapping Variable(<urn:swrl#at>)))Head(ClassAtom(dbowl:VirtualPropertyMapping Variable(<urn:swrl#v>))))
DLSafeRule(Body(ClassAtom(dbowl:DBPrimaryKey Variable(<urn:swrl#pkr1>)) ClassAtom(dbowl:DBPrimaryKey Variable(<urn:swrl#pkr2>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#op1>) Variable(<urn:swrl#ofk1>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#op2>) Variable(<urn:swrl#ofk2>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#rr1>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#rr2>)) ClassAtom(dbowl:BinaryObjectPropertyMapping Variable(<urn:swrl#op1>)) ObjectPropertyAtom(dbowl:references Variable(<urn:swrl#ofk1>) Variable(<urn:swrl#pkr1>)) ObjectPropertyAtom(dbowl:references Variable(<urn:swrl#ofk2>) Variable(<urn:swrl#pkr2>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#op2>) Variable(<urn:swrl#br>)) ClassAtom(dbowl:BinaryObjectPropertyMapping Variable(<urn:swrl#op2>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#op1>) Variable(<urn:swrl#br>)) DifferentIndividualsAtom(Variable(<urn:swrl#op1>) Variable(<urn:swrl#op2>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#br>)) ClassAtom(dbowl:DBForeignKey Variable(<urn:swrl#ofk2>)) ClassAtom(dbowl:DBForeignKey Variable(<urn:swrl#ofk1>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#pkr1>) Variable(<urn:swrl#rr1>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#pkr2>) Variable(<urn:swrl#rr2>)))Head(ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#op1>) Variable(<urn:swrl#rr1>)) ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#op1>) Variable(<urn:swrl#rr2>)) ObjectPropertyAtom(dbowl:hasInversePropertyMapping Variable(<urn:swrl#op1>) Variable(<urn:swrl#op2>))))
DLSafeRule(Body(ClassAtom(dbowl:ConceptMapping Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ClassAtom(dbowl:DBSelectionView Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#r>)))Head(ClassAtom(dbowl:VirtualConceptMapping Variable(<urn:swrl#v>))))
DLSafeRule(Body(ClassAtom(dbowl:DBJoinProjectionSelectionView Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at1>)) ClassAtom(dbowl:DBQueryCondition Variable(<urn:swrl#c>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#c>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#j>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#c>)))Head(ObjectPropertyAtom(dbowl:subClassOfMapping Variable(<urn:swrl#c>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:isSubClassOfDomainOfMapping Variable(<urn:swrl#c>) Variable(<urn:swrl#j>))))
DLSafeRule(Body(ClassAtom(dbowl:DBJoinProjectionSelectionView Variable(<urn:swrl#v>)) ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at1>)) ClassAtom(dbowl:DBQueryCondition Variable(<urn:swrl#c>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#c>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#j>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#c>)))Head(ObjectPropertyAtom(dbowl:subClassOfMapping Variable(<urn:swrl#c>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:isSubClassOfRangeOfMapping Variable(<urn:swrl#c>) Variable(<urn:swrl#j>))))
DLSafeRule(Body(ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at1>)) ClassAtom(dbowl:DBQueryCondition Variable(<urn:swrl#c>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#c>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#j>)) ClassAtom(dbowl:DBJoinSelectionView Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#c>)))Head(ObjectPropertyAtom(dbowl:subClassOfMapping Variable(<urn:swrl#c>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:isSubClassOfDomainOfMapping Variable(<urn:swrl#c>) Variable(<urn:swrl#j>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at1>)) ClassAtom(dbowl:DBQueryCondition Variable(<urn:swrl#c>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#c>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#j>)) ClassAtom(dbowl:DBJoinSelectionView Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#c>)))Head(ObjectPropertyAtom(dbowl:subClassOfMapping Variable(<urn:swrl#c>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:isSubClassOfRangeOfMapping Variable(<urn:swrl#c>) Variable(<urn:swrl#j>))))
DLSafeRule(Body(ClassAtom(dbowl:DBJoinProjectionSelectionView Variable(<urn:swrl#v>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#al>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#al>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttributeAlias Variable(<urn:swrl#al>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r>)))Head(ObjectPropertyAtom(dbowl:propertyRestrictedConceptMapping Variable(<urn:swrl#al>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:isSubClassOfDomainOfMapping Variable(<urn:swrl#al>) Variable(<urn:swrl#j>))))
DLSafeRule(Body(ClassAtom(dbowl:DBJoinProjectionSelectionView Variable(<urn:swrl#v>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#al>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#al>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttributeAlias Variable(<urn:swrl#al>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)))Head(ObjectPropertyAtom(dbowl:isSubClassOfRangeOfMapping Variable(<urn:swrl#al>) Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:propertyRestrictedConceptMapping Variable(<urn:swrl#al>) Variable(<urn:swrl#r>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#al>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#al>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttributeAlias Variable(<urn:swrl#al>)) ClassAtom(dbowl:DBJoinProjectionView Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r>)))Head(ObjectPropertyAtom(dbowl:propertyRestrictedConceptMapping Variable(<urn:swrl#al>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:isSubClassOfDomainOfMapping Variable(<urn:swrl#al>) Variable(<urn:swrl#j>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#al>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#al>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttribute Variable(<urn:swrl#at>)) ClassAtom(dbowl:DBAttributeAlias Variable(<urn:swrl#al>)) ClassAtom(dbowl:DBJoinProjectionView Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)))Head(ObjectPropertyAtom(dbowl:isSubClassOfRangeOfMapping Variable(<urn:swrl#al>) Variable(<urn:swrl#j>)) ObjectPropertyAtom(dbowl:propertyRestrictedConceptMapping Variable(<urn:swrl#al>) Variable(<urn:swrl#r>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#q>)) ClassAtom(dbowl:VirtualConceptMapping Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ClassAtom(dbowl:DBQuery Variable(<urn:swrl#q>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#q>) Variable(<urn:swrl#r>)) ClassAtom(dbowl:DBEquivalentView Variable(<urn:swrl#v>)))Head(ObjectPropertyAtom(dbowl:equivalentClassMapping Variable(<urn:swrl#v>) Variable(<urn:swrl#r>))))
DLSafeRule(Body(ClassAtom(dbowl:DBSingleDependentPrimaryKey Variable(<urn:swrl#pk>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#pk>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#pk>) Variable(<urn:swrl#at2>)) DifferentIndividualsAtom(Variable(<urn:swrl#at1>) Variable(<urn:swrl#at2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r>) Variable(<urn:swrl#at2>)) ClassAtom(dbowl:DBPrimaryForeignKeyAttribute Variable(<urn:swrl#at1>)) DifferentIndividualsAtom(Variable(<urn:swrl#fk1>) Variable(<urn:swrl#fk2>)) ClassAtom(dbowl:DBForeignKey Variable(<urn:swrl#fk1>)) ClassAtom(dbowl:DBForeignKey Variable(<urn:swrl#fk2>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ClassAtom(dbowl:DBPrimaryForeignKeyAttribute Variable(<urn:swrl#at2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#fk1>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#fk2>) Variable(<urn:swrl#at2>)))Head(ClassAtom(dbowl:TransitiveObjectPropertyMapping Variable(<urn:swrl#at1>)) ClassAtom(dbowl:BinaryObjectPropertyMapping Variable(<urn:swrl#at1>))))
DLSafeRule(Body(ClassAtom(dbowl:DBSingleDependentPrimaryKey Variable(<urn:swrl#pk1>)) ClassAtom(dbowl:DBPrimaryForeignKeyAttribute Variable(<urn:swrl#at1>)) ClassAtom(dbowl:DBForeignKey Variable(<urn:swrl#fk1>)) ObjectPropertyAtom(dbowl:references Variable(<urn:swrl#fk1>) Variable(<urn:swrl#pk2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r2>) Variable(<urn:swrl#pk2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r1>) Variable(<urn:swrl#at1>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r2>)) ClassAtom(dbowl:SpecificRelationMapping Variable(<urn:swrl#r1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#pk1>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#fk1>) Variable(<urn:swrl#at1>)) ClassAtom(dbowl:DBPrimaryKey Variable(<urn:swrl#pk2>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r1>)))Head(ClassAtom(dbowl:UnaryObjectPropertyMapping Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:subClassOfMapping Variable(<urn:swrl#r1>) Variable(<urn:swrl#r2>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#op>) Variable(<urn:swrl#dr>)) ClassAtom(dbowl:DBForeignKey Variable(<urn:swrl#ofk>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#rr>)) ClassAtom(dbowl:UnaryObjectPropertyMapping Variable(<urn:swrl#op>)) ObjectPropertyAtom(dbowl:references Variable(<urn:swrl#ofk>) Variable(<urn:swrl#pkr>)) ClassAtom(dbowl:DBPrimaryKey Variable(<urn:swrl#pkr>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#dr>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#op>) Variable(<urn:swrl#ofk>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#pkr>) Variable(<urn:swrl#rr>)))Head(ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#op>) Variable(<urn:swrl#dr>)) ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#op>) Variable(<urn:swrl#rr>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#op>) Variable(<urn:swrl#opk>)) ClassAtom(dbowl:DBNAryDependentRelationshipRelation Variable(<urn:swrl#opr>)) ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#opk>) Variable(<urn:swrl#opr>)) ClassAtom(dbowl:UnaryObjectPropertyMapping Variable(<urn:swrl#op>)) ClassAtom(dbowl:DBForeignKey Variable(<urn:swrl#opk>)))Head(ObjectPropertyAtom(dbowl:existsSomePropertyRestriction Variable(<urn:swrl#opr>) Variable(<urn:swrl#op>))))
DLSafeRule(Body(ClassAtom(dbowl:ObjectPropertyMapping Variable(<urn:swrl#op>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#dr>) Variable(<urn:swrl#op>)) ClassAtom(dbowl:DBNotNullAttribute Variable(<urn:swrl#op>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#dr>)))Head(ObjectPropertyAtom(dbowl:min1CardinalityRestriction Variable(<urn:swrl#dr>) Variable(<urn:swrl#op>))))
DLSafeRule(Body(ClassAtom(dbowl:DBPrimaryKey Variable(<urn:swrl#pk>)) ClassAtom(dbowl:UnaryObjectPropertyMapping Variable(<urn:swrl#op>)) ObjectPropertyAtom(dbowl:references Variable(<urn:swrl#op>) Variable(<urn:swrl#pk>)))Head(ClassAtom(dbowl:FunctionalObjectPropertyMapping Variable(<urn:swrl#op>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r1>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r2>) Variable(<urn:swrl#at2>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#at2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#r1>)) DifferentIndividualsAtom(Variable(<urn:swrl#at1>) Variable(<urn:swrl#at2>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ClassAtom(dbowl:DBPrimaryKeyAttribute Variable(<urn:swrl#at2>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r1>)))Head(ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r1>)) ObjectPropertyAtom(dbowl:hasPropertyMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r2>))))
DLSafeRule(Body(ClassAtom(dbowl:DBQuery Variable(<urn:swrl#cm>)) ClassAtom(dbowl:DBProjectionSelectionView Variable(<urn:swrl#v>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#cm>) Variable(<urn:swrl#r>)) ClassAtom(dbowl:VirtualConceptMapping Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#cm>)))Head(ObjectPropertyAtom(dbowl:subClassOfMapping Variable(<urn:swrl#v>) Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:propertyRestrictedConceptMapping Variable(<urn:swrl#v>) Variable(<urn:swrl#r>))))
DLSafeRule(Body(ClassAtom(dbowl:DBQuery Variable(<urn:swrl#cm>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#cm>) Variable(<urn:swrl#r>)) ClassAtom(dbowl:VirtualConceptMapping Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBProjectionView Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#cm>)))Head(ObjectPropertyAtom(dbowl:propertyRestrictedConceptMapping Variable(<urn:swrl#v>) Variable(<urn:swrl#r>))))
DLSafeRule(Body(ClassAtom(dbowl:DBQuery Variable(<urn:swrl#cm>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#cm>) Variable(<urn:swrl#r>)) ClassAtom(dbowl:VirtualConceptMapping Variable(<urn:swrl#v>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r>)) ClassAtom(dbowl:DBSelectionView Variable(<urn:swrl#v>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#v>) Variable(<urn:swrl#cm>)))Head(ObjectPropertyAtom(dbowl:subClassOfMapping Variable(<urn:swrl#v>) Variable(<urn:swrl#r>))))
DLSafeRule(Body(DifferentIndividualsAtom(Variable(<urn:swrl#r1>) Variable(<urn:swrl#r2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r1>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r2>) Variable(<urn:swrl#at2>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#at2>)) ClassAtom(dbowl:DatatypePropertyMapping Variable(<urn:swrl#at2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#r1>)) DifferentIndividualsAtom(Variable(<urn:swrl#at1>) Variable(<urn:swrl#at2>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r1>)))Head(ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r1>)) ObjectPropertyAtom(dbowl:hasPropertyMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r2>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#r1>) Variable(<urn:swrl#at1>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#at2>)) ClassAtom(dbowl:ObjectPropertyMapping Variable(<urn:swrl#at2>)) ObjectPropertyAtom(dbowl:hasPart Variable(<urn:swrl#j>) Variable(<urn:swrl#r1>)) DifferentIndividualsAtom(Variable(<urn:swrl#at1>) Variable(<urn:swrl#at2>)) ClassAtom(dbowl:DBQueryJoin Variable(<urn:swrl#j>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#r1>)) ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#at2>) Variable(<urn:swrl#r2>)))Head(ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r1>)) ObjectPropertyAtom(dbowl:hasPropertyMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#at1>)) ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#j>) Variable(<urn:swrl#r2>))))
DLSafeRule(Body(ObjectPropertyAtom(dbowl:isPartOf Variable(<urn:swrl#dp>) Variable(<urn:swrl#dr>)) ClassAtom(dbowl:DatatypePropertyMapping Variable(<urn:swrl#dp>)) ClassAtom(dbowl:DBRelation Variable(<urn:swrl#dr>)) ObjectPropertyAtom(dbowl:hasAttributeDomain Variable(<urn:swrl#dp>) Variable(<urn:swrl#dt>)))Head(ObjectPropertyAtom(dbowl:hasRangeMapping Variable(<urn:swrl#dp>) Variable(<urn:swrl#dt>)) ObjectPropertyAtom(dbowl:hasDomainMapping Variable(<urn:swrl#dp>) Variable(<urn:swrl#dr>))))
)